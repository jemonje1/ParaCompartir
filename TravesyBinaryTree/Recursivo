INORDER

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result =new LinkedList<>();
        traverser(root, result);
        return result;
    }

    private void traverser(TreeNode root, List<Integer> result){
        if (root==null)
            return;

        traverser(root.left, result);
        result.add(root.val);
        traverser(root.right, result);
    }
}

POSTORDER

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> result =new LinkedList<>();
        traverser(root, result);
        return result;
    }

    private void traverser(TreeNode root, List<Integer> result){
        if (root==null)
            return;

        traverser(root.left, result);
        traverser(root.right, result);
        result.add(root.val);
    }
}

PREORDER

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result =new LinkedList<>();
        traverser(root, result);
        return result;
    }

    private void traverser(TreeNode root, List<Integer> result){
        if (root==null)
            return;

        result.add(root.val);

        traverser(root.left, result);
        traverser(root.right, result);
    }
}

BFS
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null){
            return new LinkedList<>();
        }
        List<List<Integer>> result = new LinkedList<>();
        tranverse(root, result,1);
        return result;
    }

    private void tranverse(TreeNode root, List<List<Integer>> result, int level){
        TreeNode node = root;
        if (node == null) 
            return;
        
        if (result.size() < level) 
            result.add(new LinkedList<>());
        
        result.get(level - 1).add(node.val);
        tranverse(node.left, result, level+1);
        tranverse(node.right, result, level+1);
    }
}
